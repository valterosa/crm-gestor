# Script para configurar e testar o Codacy
# Uso: .\test-codacy-setup.ps1

Write-Host "üîß Testando configura√ß√£o do Codacy..." -ForegroundColor Yellow

# Verificar se o .env existe
if (Test-Path ".env") {
    Write-Host "‚úÖ Arquivo .env encontrado" -ForegroundColor Green
    
    # Carregar vari√°veis de ambiente
    Get-Content ".env" | ForEach-Object {
        if ($_ -match "^([^#][^=]*?)=(.*)$") {
            [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
        }
    }
    
    $token = $env:CODACY_PROJECT_TOKEN
    if ($token) {
        Write-Host "‚úÖ Token do Codacy encontrado: $($token.Substring(0,8))..." -ForegroundColor Green
    } else {
        Write-Host "‚ùå Token do Codacy n√£o encontrado no .env" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚ùå Arquivo .env n√£o encontrado" -ForegroundColor Red
    Write-Host "Execute primeiro: .\setup-codacy-token.ps1" -ForegroundColor Yellow
    exit 1
}

# Verificar se o Codacy CLI est√° instalado
Write-Host "üîç Verificando instala√ß√£o do Codacy CLI..." -ForegroundColor Yellow

try {
    $version = & codacy-analysis-cli --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Codacy CLI instalado: $version" -ForegroundColor Green
    } else {
        throw "N√£o instalado"
    }
} catch {
    Write-Host "‚ùå Codacy CLI n√£o est√° instalado" -ForegroundColor Red
    Write-Host "Instalando via npm..." -ForegroundColor Yellow
    
    npm install -g @codacy/codacy-analysis-cli
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Codacy CLI instalado com sucesso" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Falha na instala√ß√£o do Codacy CLI" -ForegroundColor Red
        exit 1
    }
}

# Testar an√°lise local
Write-Host "üß™ Executando teste de an√°lise local..." -ForegroundColor Yellow

try {
    $output = & codacy-analysis-cli analyze --directory . --tool eslint --format json --output test-codacy.json --timeout 60 2>&1
    
    if ($LASTEXITCODE -eq 0 -and (Test-Path "test-codacy.json")) {
        $results = Get-Content "test-codacy.json" | ConvertFrom-Json
        Write-Host "‚úÖ An√°lise local executada com sucesso" -ForegroundColor Green
        Write-Host "üìä Resultados: $($results.Count) issues encontrados" -ForegroundColor Cyan
        
        # Limpar arquivo de teste
        Remove-Item "test-codacy.json" -ErrorAction SilentlyContinue
    } else {
        Write-Host "‚ö†Ô∏è  An√°lise local executada mas sem resultados JSON" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Falha na an√°lise local: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüéâ Configura√ß√£o do Codacy conclu√≠da!" -ForegroundColor Green
Write-Host "üìã Comandos dispon√≠veis:" -ForegroundColor Cyan
Write-Host "  npm run codacy:analyze  - An√°lise local" -ForegroundColor White
Write-Host "  npm run codacy:upload   - An√°lise e upload" -ForegroundColor White
Write-Host "  npm run codacy:local    - An√°lise ESLint local" -ForegroundColor White
